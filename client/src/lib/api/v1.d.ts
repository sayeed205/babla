/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Start Auth */
    get: {
      parameters: {
        query: {
          /** @example web */
          source: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "authUrl": "https://oauth.telegram.org/auth?bot_id=6206001545&origin=http://127.0.0.1:3333&return_to=http://127.0.0.1:3333/api/auth/callback/ndid6g4dhwowkru8ak1jl324?source=web&request_access=write",
             *       "session": "ndid6g4dhwowkru8ak1jl324",
             *       "expires": "2025-08-05T14:46:19.236+00:00"
             *     } */
            'application/json': {
              authUrl: string
              session: string
              expires: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/poll/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Poll Auth Status */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example k3u11olwgj0nkybs3si0j6ug */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "user": {
             *         "id": "6252490183",
             *         "firstName": "Hitarashi (\"⁧;(\"",
             *         "lastName": null,
             *         "username": "sayeed69",
             *         "avatar": "https://t.me/i/userpic/320/bBe8s6eYYwE5CzHABZsIU0yV9paLztxCiaV752qnfiXi3wb8ir7FfNYu_vqCvrfB.jpg",
             *         "createdAt": "2025-08-01T06:22:58.812+00:00",
             *         "updatedAt": "2025-08-01T06:22:58.812+00:00"
             *       },
             *       "token": {
             *         "type": "bearer",
             *         "name": null,
             *         "token": "oat_MQ.bm8tYmR2NHV6YmF5WWFYN0VidFhvZ2VLRW5nQzBaWXgtYVA1Wko3dzUwNTI1NDkyNg",
             *         "abilities": [
             *           "*"
             *         ],
             *         "lastUsedAt": null,
             *         "expiresAt": null
             *       }
             *     } */
            'application/json': {
              user: components['schemas']['UserInfo']
              token: components['schemas']['UserToken']
            }
          }
        }
        202: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message: string
            }
          }
        }
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Session not found"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
        410: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Authentication failed"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** ME */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": "6252490183",
             *       "firstName": "Hitarashi (\"⁧;(\"",
             *       "lastName": null,
             *       "username": "sayeed69",
             *       "avatar": "https://t.me/i/userpic/320/bBe8s6eYYwE5CzHABZsIU0yV9paLztxCiaV752qnfiXi3wb8ir7FfNYu_vqCvrfB.jpg",
             *       "createdAt": "2025-08-02T12:18:46.884+00:00",
             *       "updatedAt": "2025-08-02T12:18:46.884+00:00"
             *     } */
            'application/json': components['schemas']['UserInfo']
          }
        }
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Unauthorized access"
             *     } */
            'application/json': components['schemas']['UnauthorizedAccess']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Logout */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Unauthorized access"
             *     } */
            'application/json': components['schemas']['UnauthorizedAccess']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/movies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All Movies
     * @description Get all the movies in a paginated format
     */
    get: {
      parameters: {
        query?: {
          /** @example 1 */
          page?: number
          /** @example 2 */
          limit?: number
          /** @example title */
          sort?: 'title' | 'year'
          /** @example desc */
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "meta": {
             *         "total": 1,
             *         "perPage": 2,
             *         "currentPage": 1,
             *         "lastPage": 1,
             *         "firstPage": 1,
             *         "firstPageUrl": "/api/movies?page=1",
             *         "lastPageUrl": "/api/movies?page=1",
             *         "nextPageUrl": null,
             *         "previousPageUrl": null
             *       },
             *       "data": [
             *         {
             *           "id": "mission-impossible-1996",
             *           "title": "Mission: Impossible",
             *           "year": 1996
             *         }
             *       ]
             *     } */
            'application/json': {
              meta: components['schemas']['PanigatedResponseMeta']
              data: {
                id: string
                title: string
                year: number
              }[]
            }
          }
        }
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "errors": [
             *         {
             *           "message": "Unauthorized Access"
             *         }
             *       ]
             *     } */
            'application/json': {
              message: string
            }
          }
        }
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "errors": [
             *         {
             *           "message": "The selected order is invalid",
             *           "rule": "enum",
             *           "field": "order",
             *           "meta": {
             *             "choices": [
             *               "asc",
             *               "desc"
             *             ]
             *           }
             *         }
             *       ]
             *     } */
            'application/json': {
              errors: {
                message?: string
                rule?: string
                field?: string
                meta?: {
                  choices: string[]
                }
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/movies/{id}/images': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Movie Images by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example mission-impossible-1996 */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "name": "Mission: Impossible",
             *       "tmdb_id": "954",
             *       "imdb_id": "tt0117060",
             *       "hdmovielogo": [
             *         {
             *           "id": "71561",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/hdmovielogo/mission-impossible-536d3c446eaa6.png",
             *           "lang": "en",
             *           "likes": "15"
             *         }
             *       ],
             *       "moviedisc": [
             *         {
             *           "id": "90705",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/moviedisc/mission-impossible-5481914f8ce7c.png",
             *           "lang": "en",
             *           "likes": "9",
             *           "disc": "1",
             *           "disc_type": "bluray"
             *         }
             *       ],
             *       "hdmovieclearart": [
             *         {
             *           "id": "58420",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/hdmovieclearart/mission-impossible-529b6b25e62e5.png",
             *           "lang": "en",
             *           "likes": "8"
             *         }
             *       ],
             *       "movieposter": [
             *         {
             *           "id": "65883",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/movieposter/mission-impossible-53172da055225.jpg",
             *           "lang": "en",
             *           "likes": "7"
             *         }
             *       ],
             *       "moviethumb": [
             *         {
             *           "id": "37978",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/moviethumb/mission-impossible-51b39a23d148b.jpg",
             *           "lang": "en",
             *           "likes": "5"
             *         }
             *       ],
             *       "moviebackground": [
             *         {
             *           "id": "223478",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/moviebackground/mission-impossible-5ac4b88bbc947.jpg",
             *           "lang": "",
             *           "likes": "4"
             *         }
             *       ],
             *       "moviebanner": [
             *         {
             *           "id": "37977",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/moviebanner/mission-impossible-51b39a15d74c3.jpg",
             *           "lang": "en",
             *           "likes": "3"
             *         }
             *       ],
             *       "movie4kbackground": [
             *         {
             *           "id": "453857",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/movie4kbackground/mission-impossible-684f4f9807f94.jpg",
             *           "lang": "",
             *           "likes": "2"
             *         }
             *       ],
             *       "movielogo": [
             *         {
             *           "id": "249",
             *           "url": "https://assets.fanart.tv/fanart/movies/954/movielogo/mission-impossible-4efa1e7797b50.png",
             *           "lang": "en",
             *           "likes": "1"
             *         }
             *       ]
             *     } */
            'application/json': components['schemas']['MovieImages']
          }
        }
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Unauthorized access"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Movie not found"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/movies/{id}/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Movie Info by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example mission-impossible-1996 */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "title": "Mission: Impossible",
             *       "year": 1996,
             *       "ids": {
             *         "trakt": 45491255,
             *         "slug": "mission-impossible-1996",
             *         "imdb": "tt0117060",
             *         "tmdb": 80210323
             *       },
             *       "tagline": "Expect the impossible.",
             *       "overview": "When Ethan Hunt, the leader of a crack espionage team whose perilous operation has gone awry with no explanation, discovers that a mole has penetrated the CIA, he's surprised to learn that he's the prime suspect. To clear his name, Hunt now must ferret out the real double agent and, in the process, even the score.",
             *       "released": "1996-05-2",
             *       "runtime": 110,
             *       "country": "en",
             *       "trailer": "https://youtube.com/watch?v=L8Pbjh4EZRk",
             *       "homepage": null,
             *       "status": "released",
             *       "rating": 7.40212,
             *       "votes": 19666,
             *       "comment_count": 65,
             *       "updated_at": "2025-08-04T17:15:50.000Z",
             *       "language": "en",
             *       "languages": [
             *         "en",
             *         "cs",
             *         "fr"
             *       ],
             *       "available_translations": [
             *         "ca",
             *         "bg"
             *       ],
             *       "genres": [
             *         "adventure"
             *       ],
             *       "subgenres": [
             *         "undercover",
             *         "undercover"
             *       ],
             *       "certification": "PG-13",
             *       "original_title": null,
             *       "after_credits": false,
             *       "during_credits": false
             *     } */
            'application/json': components['schemas']['MovieInfo']
          }
        }
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Unauthorized access"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Movie not found"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/movies/{id}/stream': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Movie Stream by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example mission-impossible-1996 */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tvs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** All TV Shows */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          /** @example title */
          sort?: 'title' | 'firstAirDate' | 'popularity' | 'voteAverage' | 'voteCount'
          /** @example asc */
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "meta": {
             *         "total": 1,
             *         "perPage": 20,
             *         "currentPage": 1,
             *         "lastPage": 1,
             *         "firstPage": 1,
             *         "firstPageUrl": "/tvs?page=1",
             *         "lastPageUrl": "/tvs?page=1",
             *         "nextPageUrl": null,
             *         "previousPageUrl": null
             *       },
             *       "data": [
             *         {
             *           "id": "37854",
             *           "title": "One Piece",
             *           "firstAirDate": "1999-10-20T00:00:00.000Z",
             *           "lastAirDate": "2025-06-15T00:00:00.000Z",
             *           "popularity": 99.8754,
             *           "voteAverage": 8.722,
             *           "voteCount": 4920,
             *           "adult": false,
             *           "poster": "/uStT6g4khexdKPyaiosp0fj3zEz.jpg"
             *         }
             *       ]
             *     } */
            'application/json': {
              meta: {
                total: number
                perPage: number
                currentPage: number
                lastPage: number
                firstPage: number
                firstPageUrl: string
                lastPageUrl: string | null
                nextPageUrl: string | null
                previousPageUrl: string | null
              }
              data: {
                id?: string
                title?: string
                firstAirDate?: string
                lastAirDate?: string
                popularity?: number
                voteAverage?: number
                voteCount?: number
                adult?: boolean
                poster?: string
              }[]
            }
          }
        }
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "errors": [
             *         {
             *           "message": "The selected order is invalid",
             *           "rule": "enum",
             *           "field": "order",
             *           "meta": {
             *             "choices": [
             *               "asc",
             *               "desc"
             *             ]
             *           }
             *         }
             *       ]
             *     } */
            'application/json': {
              errors: {
                message?: string
                rule?: string
                field?: string
                meta?: {
                  choices: string[]
                }
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tvs/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a TV Show */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example 37854 */
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": "37854",
             *       "title": "One Piece",
             *       "originalTitle": "ワンピース",
             *       "overview": "Years ago, the fearsome Pirate King, Gol D. Roger was executed leaving a huge pile of treasure and the famous \"One Piece\" behind. Whoever claims the \"One Piece\" will be named the new King of the Pirates.\n\nMonkey D. Luffy, a boy who consumed a \"Devil Fruit,\" decides to follow in the footsteps of his idol, the pirate Shanks, and find the One Piece. It helps, of course, that his body has the properties of rubber and that he's surrounded by a bevy of skilled fighters and thieves to help him along the way.\n\nLuffy will do anything to get the One Piece and become King of the Pirates!",
             *       "firstAirDate": "1999-10-20T00:00:00.000Z",
             *       "lastAirDate": "2025-06-15T00:00:00.000Z",
             *       "popularity": 99.8754,
             *       "voteAverage": 8.722,
             *       "voteCount": 4920,
             *       "adult": false,
             *       "genres": [
             *         "Action & Adventure",
             *         "Comedy",
             *         "Animation"
             *       ],
             *       "seasons": [
             *         {
             *           "id": "364569",
             *           "title": "Egghead Island",
             *           "seasonNumber": 22,
             *           "voteAverage": 8.8,
             *           "poster": "/4sCCh2TxpABEEg2e6sLjDfjQbcn.jpg",
             *           "totalEpisodes": 1
             *         }
             *       ]
             *     } */
            'application/json': {
              id: string
              title: string
              originalTitle: string
              overview: string
              firstAirDate: string
              lastAirDate: string
              popularity: number
              voteAverage: number
              voteCount: number
              adult: boolean
              genres: string[]
              seasons: {
                id?: string
                title?: string
                seasonNumber?: number
                voteAverage?: number
                poster?: string
                totalEpisodes?: number
              }[]
            }
          }
        }
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "TV Show not found"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tvs/{tvId}/seasons/{seasonNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a Season */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example 37854 */
          tvId: number
          /** @example 22 */
          seasonNumber: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": "364569",
             *       "title": "Egghead Island",
             *       "seasonNumber": 22,
             *       "airDate": null,
             *       "overview": "The aftermaths of both the Levely and the Raid on Onigashima, as well as the erasure of the Lulusia Kingdom, cause major shifts across the world that could lead to global war. The Straw Hat Pirates, following their Log Pose, arrive at the mysterious, futuristic island Egghead where the super genius Dr. Vegapunk resides. However, after being tipped off about Vegapunk's research into the Void Century, the World Government decides to dispatch a CP0 team to assassinate Vegapunk. Betrayal and intrigue on all sides leads to a Marine siege on the island that will escalate into an incident that will shock the world.",
             *       "voteAverage": 8.8,
             *       "poster": "/jwvpVSLsoo0he4TDV4RUXpEwFE2.jpg",
             *       "episodes": [
             *         {
             *           "id": "6248132",
             *           "airDate": "2025-06-08T00:00:00.000Z",
             *           "episodeNumber": 1132,
             *           "title": "A Pledge to Ginny - Kuma Becomes a Father",
             *           "overview": "Two years after Ginny’s abduction, the Revolutionary Army suddenly receives a call from her.",
             *           "runtime": 24,
             *           "voteAverage": 0,
             *           "voteCount": 0,
             *           "thumbnail": "/gxy3COlCp0YRN8QM0mIlV1dAoUI.jpg"
             *         }
             *       ],
             *       "tvShow": {
             *         "id": "37854",
             *         "title": "One Piece",
             *         "originalTitle": "ワンピース",
             *         "poster": "/cMD9Ygz11zjJzAovURpO75Qg7rT.jpg",
             *         "backdrop": "/4Mt7WHox67uJ1yErwTBFcV8KWgG.jpg",
             *         "logo": "/eHt1s9ZPazl4jhW5fw4pLdPrENG.png",
             *         "seasons": [
             *           {
             *             "id": "364569",
             *             "seasonNumber": 22,
             *             "title": "Egghead Island"
             *           }
             *         ]
             *       }
             *     } */
            'application/json': {
              id: string
              title: string
              seasonNumber: number
              airDate: string | null
              overview: string
              voteAverage: number
              episodes: {
                id?: string
                airDate?: string
                episodeNumber?: number
                title?: string
                overview?: string
                runtime?: number
                voteAverage?: number
                voteCount?: number
                thumbnail?: string
              }[]
              tvShow: {
                id: string
                title: string
                originalTitle: string
                seasons: {
                  id?: string
                  seasonNumber?: number
                  title?: string
                }[]
                poster: string
                backdrop: string
                logo: string
              }
              poster: string
            }
          }
        }
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Season not found"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tvs/{tvId}/seasons/{seasonNumber}/episodes/{episodeNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get an Episode */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @example 37854 */
          tvId: number
          /** @example 22 */
          seasonNumber: number
          /** @example 1132 */
          episodeNumber: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "id": "6248132",
             *       "airDate": "2025-06-08T00:00:00.000Z",
             *       "episodeNumber": 1132,
             *       "title": "A Pledge to Ginny - Kuma Becomes a Father",
             *       "overview": "Two years after Ginny’s abduction, the Revolutionary Army suddenly receives a call from her.",
             *       "runtime": 24,
             *       "voteAverage": 0,
             *       "voteCount": 0,
             *       "videos": [
             *         {
             *           "key": "G0ksOykAkXQ",
             *           "name": "Fatherhood is Everything To Kuma - Official Clip [Subtitled]",
             *           "type": "Clip"
             *         },
             *         {
             *           "key": "F6yk7nHlXHM",
             *           "name": "Episode 1132 Preview - A Pledge to Ginny - Kuma Becomes a Father [Subtitled]",
             *           "type": "Trailer"
             *         }
             *       ],
             *       "links": null,
             *       "meta": {
             *         "ext": "mkv",
             *         "size": 1434588233,
             *         "type": "video/x-matroska",
             *         "bitRate": 5925,
             *         "bitDepth": 8,
             *         "frameRate": 23.976,
             *         "videoCodec": "AVC"
             *       },
             *       "createdAt": "2025-06-28T10:14:14.169+00:00",
             *       "updatedAt": "2025-06-28T10:14:14.169+00:00",
             *       "thumbnail": "/2lCHV94GUSJQbKr0LoJMi0halI0.jpg",
             *       "more": [],
             *       "tvShow": {
             *         "id": "37854",
             *         "title": "One Piece",
             *         "originalTitle": "ワンピース",
             *         "poster": "/gJI77i79KnRuc9mGPKADPZWAE8O.jpg",
             *         "backdrop": "/6fRwRD7GdCfg6owzmCT3VgQtowl.jpg",
             *         "logo": "/ralWJWCZaKJDcz9y95ja8tqzI1B.png"
             *       }
             *     } */
            'application/json': {
              id: string
              airDate: string
              episodeNumber: number
              title: string
              overview: string
              runtime: number
              voteAverage: number
              voteCount: number
              videos: {
                key: string
                name: string
                type: string
              }[]
              links: null
              meta: {
                ext: string
                size: number
                type: string
                bitRate: number
                bitDepth: number
                frameRate: number
                videoCodec: string
              }
              createdAt: string
              updatedAt: string
              thumbnail: string
              more: string[]
              tvShow: {
                id: string
                title: string
                originalTitle: string
                poster: string
                backdrop: string
                logo: string
              }
            }
          }
        }
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "TV show not found"
             *     } */
            'application/json': {
              message: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tvs/{tvId}/seasons/{seasonNumber}/episodes/{episodeNumber}/stream': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Stream an Episode */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          tvId: number
          seasonNumber: number
          episodeNumber: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/trakt/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Start Trakt auth */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "device_code": "6a35e2f407029dc3ab09485ac3ec8725c14939dbe7de55fc2887ed5905e3513f",
             *       "user_code": "73380AD5",
             *       "verification_url": "https://trakt.tv/activate",
             *       "expires_in": 600,
             *       "interval": 5
             *     } */
            'application/json': {
              device_code: string
              user_code: string
              verification_url: string
              expires_in: number
              interval: number
            }
          }
        }
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              errors: {
                message?: string
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/trakt/poll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Poll Trrakt Auth */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          /** @example {
           *       "code": "de15eb164c9106a4fc331041292b96d78ad0965eac6eb428e1f23f321adc0c40"
           *     } */
          'application/json': {
            code: string
          }
        }
      }
      responses: {
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "message": "Success",
             *       "status": 200
             *     } */
            'application/json': {
              message: string
              status: number
            }
          }
        }
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              status: number
              message: string
            }
          }
        }
        409: {
          headers: {
            [name: string]: unknown
          }
          content: {
            /** @example {
             *       "status": 409,
             *       "message": "Already Used – user already approved this code"
             *     } */
            'application/json': {
              status: number
              message: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    PanigatedResponseMeta: {
      total: number
      perPage: number
      currentPage: number
      lastPage: number
      firstPage: number
      firstPageUrl: string
      lastPageUrl: string
      nextPageUrl: string | null
      previousPageUrl: string | null
    }
    MovieInfo: {
      title: string
      year: number
      ids: {
        /** Format: uint */
        trakt: number
        slug: string
        imdb: string
        /** Format: uint */
        tmdb: number
      }
      tagline: string
      overview: string
      /** Format: date */
      released: string
      /** Format: uint */
      runtime: number
      country: string
      trailer: string
      homepage: string | null
      status: string
      /** Format: float */
      rating: number
      /** Format: uint */
      votes: number
      /** Format: uint */
      comment_count: number
      /** Format: date-time */
      updated_at: string
      language: string
      languages: string[]
      available_translations: string[]
      genres: string[]
      subgenres: string[]
      certification: string
      original_title: string
      after_credits: boolean
      during_credits: boolean
    }
    UnauthorizedAccess: {
      message: string
    }
    MovieImages: {
      name: string
      tmdb_id: string
      imdb_id: string
      hdmovielogo: components['schemas']['MovieImage'][]
      moviedisc: components['schemas']['MovieDiscImage'][]
      hdmovieclearart: components['schemas']['MovieImage'][]
      movieposter: components['schemas']['MovieImage'][]
      moviethumb: components['schemas']['MovieImage'][]
      moviebackground: components['schemas']['MovieImage'][]
      moviebanner: components['schemas']['MovieImage'][]
      movie4kbackground: components['schemas']['MovieImage'][]
      movielogo: components['schemas']['MovieImage'][]
    }
    MovieImage: {
      id: string
      url: string
      lang: string
      likes: string
    }
    MovieDiscImage: {
      id: string
      url: string
      lang: string
      likes: string
      disc: string
      disc_type: string
    }
    UserInfo: {
      id: string
      /** Format: 1 */
      firstName: string
      lastName: string | null
      username: string | null
      avatar: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UserToken: {
      type: string
      name: string | null
      token: string
      abilities: string[]
      /** Format: date-time */
      lastUsedAt: string | null
      /** Format: date-time */
      expiresAt: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
